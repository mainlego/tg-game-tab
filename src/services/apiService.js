// src/services/apiService.js

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const API_URL = 'https://tg-game-tab-server.onrender.com'; // –ü—Ä—è–º–æ–π URL –∫ —Å–µ—Ä–≤–µ—Ä—É (–±–µ–∑ /api –Ω–∞ –∫–æ–Ω—Ü–µ)
const DEBUG = import.meta.env.MODE === 'development'; // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST, PUT)
 * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è fetch
 * @returns {Promise<any>} - –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
 */
async function request(url, method = 'GET', data = null, options = {}) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
    const fullUrl = url.startsWith('http') ? url : `${API_URL}${url}`;
    console.log(`[DEBUG] –ü–æ–ª–Ω—ã–π URL: ${fullUrl}`);
    if (data) {
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', data);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions = {
        method,
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            ...options.headers
        },

        // –£–±–∏—Ä–∞–µ–º credentials: 'include', —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å CORS
        // credentials: 'include',
        ...options

    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –Ω–µ-GET
    if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
        fetchOptions.body = JSON.stringify(data);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (DEBUG) {
        console.log(`üì° API Request: ${method} ${url}`);
        console.log('Options:', fetchOptions);
        if (data) console.log('Data:', data);
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (!navigator.onLine) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch(fullUrl, fetchOptions);
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries([...response.headers]));

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        const responseText = await response.text();
        console.log('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):', responseText.slice(0, 1000));

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        if (!responseText) {
            return { success: true };
        }

        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try {
            const result = JSON.parse(responseText);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
            if (!response.ok || (result.success === false)) {
                const errorMessage = result.error || result.message || `HTTP –æ—à–∏–±–∫–∞: ${response.status}`;
                throw new Error(errorMessage);
            }

            return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        } catch (jsonError) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:', jsonError);
            throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${jsonError.message}`);
        }

    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (DEBUG) {
            console.error(`‚ùå API Error (${method} ${url}):`, error);
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userFriendlyError = new Error(
            error.message === 'Failed to fetch'
                ? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
                : error.message
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
        userFriendlyError.originalError = error;
        userFriendlyError.request = { url, method, data };

        throw userFriendlyError;
    }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
export const ApiService = {
    // –£–¢–ò–õ–ò–¢–´
    // =======

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     * @param {Object} params - –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     * @returns {string} - —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è URL
     */
    formatQueryParams(params = {}) {
        return new URLSearchParams(
            Object.entries(params)
                .filter(([_, value]) => value !== undefined && value !== null && value !== '')
                .map(([key, value]) => [key, value.toString()])
        ).toString();
    },

    // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
    // ============

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<Object>} - –æ–±—ä–µ–∫—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    async getAllUsers(params = {}) {
        const defaultParams = {
            page: 1,
            limit: 50,
            search: '',
            sortBy: 'lastLogin',
            sortOrder: 'desc'
        };

        const queryParams = this.formatQueryParams({
            ...defaultParams,
            ...params
        });

        return request(`/api/admin/users?${queryParams}`);
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUser(userId) {
        return request(`/api/admin/users/${userId}`);
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} userData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateUser(userId, userData) {
        return request(`/api/admin/users/${userId}`, 'PUT', userData);
    },

    /**
     * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async blockUser(userId) {
        return request(`/api/admin/users/actions`, 'POST', {
            action: 'block',
            userId
        });
    },

    /**
     * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async resetUserProgress(userId) {
        return request(`/api/admin/users/actions`, 'POST', {
            action: 'reset',
            userId
        });
    },

    // –ü–†–û–î–£–ö–¢–´
    // ========

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     * @returns {Promise<Array>} - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    async getProducts() {
        return request('/api/admin/products');
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param {Object} productData - –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @returns {Promise<Object>} - —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
     */
    async createProduct(productData) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞:', productData); // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        try {
            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ contentType –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ JSON
            const response = await request('/api/admin/products', 'POST', productData, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            return response;
        } catch (error) {
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
            throw error;
        }
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
     * @returns {Promise<Object>} - –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    async getProduct(productId) {
        return request(`/api/admin/products/${productId}`);
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param {Object} productData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    async updateProduct(productId, productData) {
        return request(`/api/admin/products/${productId}`, 'PUT', productData);
    },

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async deleteProduct(productId) {
        return request(`/api/admin/products/${productId}`, 'DELETE');
    },

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     * @param {Array<string>} orderedIds - –º–∞—Å—Å–∏–≤ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
     * @returns {Promise<Array>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    async reorderProducts(orderedIds) {
        return request('/api/admin/products/reorder', 'POST', { orderedIds });
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
     * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
     * @returns {Promise<Array>} - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
     */
    async getProductClaims(productId) {
        return request(`/api/admin/products/${productId}/claims`);
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
     * @returns {Promise<Array>} - —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
     */
    async getRecentClaims() {
        return request('/api/admin/products/claims/recent');
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
     * @param {string} claimId - ID –∑–∞—è–≤–∫–∏
     * @param {string} status - –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @param {Object} additionalData - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏ –¥—Ä.)
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
     */
    async updateClaimStatus(claimId, status, additionalData = {}) {
        return request(`/api/admin/products/claims/${claimId}`, 'PUT', {
            status,
            ...additionalData
        });
    },

    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    // ===========

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @returns {Promise<Array>} - —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async getNotificationsHistory() {
        return request('/api/admin/notifications');
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
     * @returns {Promise<Object>} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async getNotificationStats() {
        return request('/api/admin/notifications/stats');
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} notificationData - –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendNotification(notificationData) {
        return request('/api/notifications/send', 'POST', notificationData);
    },

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} notificationData - –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendTestNotification(notificationData) {
        return request('/api/notifications/test', 'POST', notificationData);
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} notificationData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async updateNotification(notificationId, notificationData) {
        return request(`/api/admin/notifications/${notificationId}`, 'PUT', notificationData);
    },

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async deleteNotification(notificationId) {
        return request(`/api/admin/notifications/${notificationId}`, 'DELETE');
    },

    // –ó–ê–î–ê–ù–ò–Ø
    // =======

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
     * @returns {Promise<Array>} - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
     */
    async getTasks() {
        return request('/api/admin/tasks');
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     * @param {Object} taskData - –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
     * @returns {Promise<Object>} - —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
     */
    async createTask(taskData) {
        return request('/api/admin/tasks', 'POST', taskData);
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     * @param {string} taskId - ID –∑–∞–¥–∞–Ω–∏—è
     * @returns {Promise<Object>} - –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
     */
    async getTask(taskId) {
        return request(`/api/admin/tasks/${taskId}`);
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
     * @param {string} taskId - ID –∑–∞–¥–∞–Ω–∏—è
     * @param {Object} taskData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
     */
    async updateTask(taskId, taskData) {
        return request(`/api/admin/tasks/${taskId}`, 'PUT', taskData);
    },

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
     * @param {string} taskId - ID –∑–∞–¥–∞–Ω–∏—è
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async deleteTask(taskId) {
        return request(`/api/admin/tasks/${taskId}`, 'DELETE');
    },

    // –ù–ê–°–¢–†–û–ô–ö–ò
    // =========

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     * @returns {Promise<Object>} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
     */
    async getGameSettings() {
        return request('/api/settings');
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
     * @param {Object} settings - –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @returns {Promise<Object>} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async updateGameSettings(settings) {
        return request('/api/settings', 'PUT', settings);
    },

    // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ==========

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Promise<Object>} - –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    async getStats() {
        return request('/api/admin/stats');
    }
};

export default ApiService;